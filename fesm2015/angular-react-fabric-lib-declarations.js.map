{"version":3,"file":"angular-react-fabric-lib-declarations.js","sources":["ng://@angular-react/fabric/lib/declarations/angular/typed-changes.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as AngularCore from '@angular/core';\r\n\r\nexport interface TypedChange<T> extends AngularCore.SimpleChange {\r\n  readonly previousValue: T;\r\n  readonly currentValue: T;\r\n}\r\n\r\n/**\r\n * Known Angular keys that components often have\r\n */\r\nexport type AngularLifeCycleKeys =\r\n  | keyof AngularCore.AfterContentChecked\r\n  | keyof AngularCore.AfterContentInit\r\n  | keyof AngularCore.AfterViewChecked\r\n  | keyof AngularCore.AfterViewInit\r\n  | keyof AngularCore.DoCheck\r\n  | keyof AngularCore.OnChanges\r\n  | keyof AngularCore.OnDestroy\r\n  | keyof AngularCore.OnInit;\r\n\r\n// Only take string keys from TComponent, since those are the only valid input property types.\r\n// Exclude any known stuff that can be eliminated as non-Inputs.\r\nexport type InputKeys<TComponent> = Exclude<keyof TComponent & string, AngularLifeCycleKeys>;\r\n\r\nexport type TypedChanges<TComponent> = Partial<{ [P in InputKeys<TComponent>]: TypedChange<TComponent[P]> }>;\r\n\r\nexport interface OnChanges<TComponent> extends AngularCore.OnChanges {\r\n  ngOnChanges(changes: TypedChanges<TComponent>): void;\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAKA,0BAGC;;;IAFC,oCAA0B;;IAC1B,mCAAyB;;;;;;AAsB3B,wBAEC;;;;;;IADC,yDAAqD;;;;;;;;;;;"}