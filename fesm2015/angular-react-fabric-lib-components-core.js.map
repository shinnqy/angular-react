{"version":3,"file":"angular-react-fabric-lib-components-core.js","sources":["ng://@angular-react/fabric/lib/components/core/declarative/item-changed.payload.ts","ng://@angular-react/fabric/lib/components/core/declarative/item-changed.helpers.ts","ng://@angular-react/fabric/lib/components/core/shared/changeable-helper.ts","ng://@angular-react/fabric/lib/components/core/shared/changeable-item.directive.ts","ng://@angular-react/fabric/lib/components/core/shared/changeable-items.directive.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport interface PropertyChange<TValue> {\r\n  readonly currentValue: TValue;\r\n}\r\n\r\nexport type ItemChanges<TItem> = { readonly [P in keyof TItem]?: PropertyChange<TItem[P]> };\r\n\r\nexport interface ItemChangedPayload<TKey extends string, TItem> {\r\n  readonly key: TKey;\r\n  readonly changes: ItemChanges<TItem>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { ItemChanges, PropertyChange } from './item-changed.payload';\r\n\r\nexport function mergeItemChanges<T extends object>(target: T, changes: ItemChanges<T>): T {\r\n  const itemChangesOverrides: Partial<T> = (Object.entries(changes) as Array<\r\n    [keyof T, PropertyChange<T[keyof T]>]\r\n  >).reduce((acc, [propertyKey, change]) => Object.assign(acc, { [propertyKey]: change.currentValue }), {});\r\n\r\n  return Object.assign({}, target, itemChangesOverrides);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { EventEmitter, QueryList } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { ItemChangedPayload, ItemChanges } from '../declarative/item-changed.payload';\r\nimport { ChangeableItemDirective } from './changeable-item.directive';\r\n\r\n/**\r\n * Helper class for single changeable item\r\n */\r\nexport class ChangeableItemHelper<TItem> {\r\n  readonly onItemChanged = new EventEmitter<ItemChangedPayload<string, TItem>>();\r\n\r\n  constructor(private readonly key: string) {}\r\n\r\n  /**\r\n   * Action to be called by user of class when change is detected\r\n   * (Typically called in ngOnChanges)\r\n   * @param changes TypedChanges that are to be emitted\r\n   */\r\n  emitChanges(changes: ItemChanges<TItem>) {\r\n    this.onItemChanged.emit({ key: this.key, changes });\r\n  }\r\n}\r\n\r\n/**\r\n * Parent class for wrapper directive for multiple ChangeableItemDirectives\r\n */\r\nexport class ChangeableItemsHelper<TItem> {\r\n  readonly onChildItemChanged = new EventEmitter<ItemChangedPayload<string, TItem>>();\r\n  readonly onItemsChanged = new EventEmitter<QueryList<ChangeableItemDirective<TItem>>>();\r\n\r\n  private readonly _subscriptionsMap: { [key: string]: Subscription } = {};\r\n  private _changeSubscription: Subscription;\r\n\r\n  /**\r\n   * Initialize subscriptions to watch for changes to children ChangeableItemDirectives\r\n   * (Typically called in ngAfterContentInit after @ContentChildren are initialized)\r\n   * @param directiveItems List of children to watch for\r\n   * @param self Reference to component using this helper. This component gets filtered out in case\r\n   *  it appears in the list of children (i.e. when a component has children of its own type)\r\n   * @param nonSelfHandler Callback to handle filtered list of children when updated\r\n   */\r\n  constructor(\r\n    private directiveItems: QueryList<ChangeableItemDirective<TItem>>,\r\n    private self?: IChangeableItemsContainer<TItem>,\r\n    private nonSelfHandler?: (nonSelfDirectives: ChangeableItemDirective<TItem>[]) => void\r\n  ) {\r\n    this._subscribeNewDirectives();\r\n    this._changeSubscription = this.directiveItems.changes.subscribe(newValues => {\r\n      this.onItemsChanged.emit(newValues);\r\n      this._subscribeNewDirectives();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action to be called by user of class when directive/component is destroyed\r\n   * (Typically called in ngOnDestroy)\r\n   */\r\n  destroy() {\r\n    Object.values(this._subscriptionsMap).forEach(value => value.unsubscribe());\r\n    this._changeSubscription.unsubscribe();\r\n  }\r\n\r\n  private _subscribeNewDirectives() {\r\n    const nonSelfDirectives = this._handleNonSelfDirectives();\r\n    nonSelfDirectives.forEach(directiveItem => {\r\n      if (this._subscriptionsMap[directiveItem.key]) {\r\n        this._subscriptionsMap[directiveItem.key].unsubscribe();\r\n      }\r\n      this._subscriptionsMap[directiveItem.key] = directiveItem.onItemChanged.subscribe(changes => {\r\n        this._handleNonSelfDirectives();\r\n        this.onChildItemChanged.emit(changes);\r\n        if (this.self && this.self.onItemChanged) {\r\n          this.self.onItemChanged.emit(changes);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private _handleNonSelfDirectives() {\r\n    const nonSelfDirectives = this.directiveItems.filter(directiveItem => directiveItem !== (this.self as any));\r\n    if (this.nonSelfHandler && nonSelfDirectives.length) {\r\n      this.nonSelfHandler(nonSelfDirectives);\r\n    }\r\n    return nonSelfDirectives;\r\n  }\r\n}\r\n\r\n/**\r\n * Interface for directives that contain changeable items\r\n */\r\nexport interface IChangeableItemsContainer<TItem> {\r\n  onChildItemChanged: EventEmitter<ItemChangedPayload<string, TItem>>;\r\n  onItemChanged?: EventEmitter<ItemChangedPayload<string, TItem>>;\r\n  onItemsChanged: EventEmitter<QueryList<ChangeableItemDirective<TItem>>>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nimport { OnChanges } from '@angular-react/fabric/lib/declarations';;\r\nimport { ItemChangedPayload, ItemChanges } from '../declarative/item-changed.payload';\r\nimport { ChangeableItemHelper } from './changeable-helper';\r\n\r\n/**\r\n * Parent class for wrapper directive for single item with OnChanges\r\n */\r\nexport abstract class ChangeableItemDirective<TItem> implements OnChanges<ChangeableItemDirective<TItem>>, OnInit {\r\n  @Input() key: string;\r\n\r\n  @Output()\r\n  get onItemChanged(): EventEmitter<ItemChangedPayload<string, TItem>> {\r\n    return this.changeableItemHelper && this.changeableItemHelper.onItemChanged;\r\n  }\r\n\r\n  private changeableItemHelper: ChangeableItemHelper<TItem>;\r\n\r\n  ngOnInit() {\r\n    this.changeableItemHelper = new ChangeableItemHelper(this.key);\r\n  }\r\n\r\n  ngOnChanges(changes: ItemChanges<TItem>) {\r\n    if (this.changeableItemHelper) {\r\n      this.changeableItemHelper.emitChanges(changes);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterContentInit, ContentChildren, EventEmitter, OnDestroy, Output, QueryList } from '@angular/core';\r\n\r\nimport { ItemChangedPayload } from '../declarative/item-changed.payload';\r\nimport { ChangeableItemsHelper, IChangeableItemsContainer } from './changeable-helper';\r\nimport { ChangeableItemDirective } from './changeable-item.directive';\r\n\r\n/**\r\n * Parent class for wrapper directive for multiple ChangeableItemDirectives\r\n */\r\nexport abstract class ChangeableItemsDirective<TItem>\r\n  implements AfterContentInit, IChangeableItemsContainer<TItem>, OnDestroy {\r\n  @ContentChildren(ChangeableItemDirective) readonly directiveItems: QueryList<ChangeableItemDirective<TItem>>;\r\n\r\n  @Output()\r\n  get onChildItemChanged(): EventEmitter<ItemChangedPayload<string, TItem>> {\r\n    return this.changeableItemsHelper && this.changeableItemsHelper.onChildItemChanged;\r\n  }\r\n  @Output()\r\n  get onItemsChanged(): EventEmitter<QueryList<ChangeableItemDirective<TItem>>> {\r\n    return this.changeableItemsHelper && this.changeableItemsHelper.onItemsChanged;\r\n  }\r\n\r\n  private changeableItemsHelper: ChangeableItemsHelper<TItem>;\r\n\r\n  abstract get items(): TItem[];\r\n\r\n  ngAfterContentInit() {\r\n    this.changeableItemsHelper = new ChangeableItemsHelper(this.directiveItems);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.changeableItemsHelper.destroy();\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}