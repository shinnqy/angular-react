import { ReactWrapperComponent } from '@angular-react/core';
import { ChangeDetectorRef, ElementRef, Renderer2, EventEmitter } from '@angular/core';
import { ISpinButtonProps } from 'office-ui-fabric-react/lib/SpinButton';
export declare class FabSpinButtonComponent extends ReactWrapperComponent<ISpinButtonProps> {
    protected reactNodeRef: ElementRef;
    componentRef?: ISpinButtonProps['componentRef'];
    defaultValue?: ISpinButtonProps['defaultValue'];
    value?: ISpinButtonProps['value'];
    min?: ISpinButtonProps['min'];
    max?: ISpinButtonProps['max'];
    step?: ISpinButtonProps['step'];
    ariaLabel?: ISpinButtonProps['ariaLabel'];
    ariaDescribedBy?: ISpinButtonProps['ariaDescribedBy'];
    title?: ISpinButtonProps['title'];
    disabled?: ISpinButtonProps['disabled'];
    className?: ISpinButtonProps['className'];
    label?: ISpinButtonProps['label'];
    labelPosition?: ISpinButtonProps['labelPosition'];
    iconProps?: ISpinButtonProps['iconProps'];
    incrementButtonIcon?: ISpinButtonProps['incrementButtonIcon'];
    decrementButtonIcon?: ISpinButtonProps['decrementButtonIcon'];
    styles?: ISpinButtonProps['styles'];
    getClassNames?: ISpinButtonProps['getClassNames'];
    upArrowButtonStyles?: ISpinButtonProps['upArrowButtonStyles'];
    downArrowButtonStyles?: ISpinButtonProps['downArrowButtonStyles'];
    theme?: ISpinButtonProps['theme'];
    incrementButtonAriaLabel?: ISpinButtonProps['incrementButtonAriaLabel'];
    decrementButtonAriaLabel?: ISpinButtonProps['decrementButtonAriaLabel'];
    precision?: ISpinButtonProps['precision'];
    ariaPositionInSet?: ISpinButtonProps['ariaPositionInSet'];
    ariaSetSize?: ISpinButtonProps['ariaSetSize'];
    ariaValueNow?: ISpinButtonProps['ariaValueNow'];
    ariaValueText?: ISpinButtonProps['ariaValueText'];
    keytipProps?: ISpinButtonProps['keytipProps'];
    validate?: ISpinButtonProps['onValidate'];
    increment?: ISpinButtonProps['onIncrement'];
    decrement?: ISpinButtonProps['onDecrement'];
    readonly onFocus: EventEmitter<Event>;
    readonly onBlur: EventEmitter<Event>;
    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, renderer: Renderer2);
}
