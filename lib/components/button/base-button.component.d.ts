/// <reference types="react" />
import { InputRendererOptions, JsxRenderFunc, ReactWrapperComponent } from '@angular-react/core';
import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnInit, Renderer2, QueryList, AfterContentInit, OnDestroy } from '@angular/core';
import { IButtonProps } from 'office-ui-fabric-react/lib/Button';
import { ContextualMenuItemDirective } from '@angular-react/fabric/lib/components/contextual-menu';
export declare abstract class FabBaseButtonComponent extends ReactWrapperComponent<IButtonProps> implements OnInit, AfterContentInit, OnDestroy {
    componentRef?: IButtonProps['componentRef'];
    href?: IButtonProps['href'];
    primary?: IButtonProps['primary'];
    uniqueId?: IButtonProps['uniqueId'];
    disabled?: IButtonProps['disabled'];
    allowDisabledFocus?: IButtonProps['allowDisabledFocus'];
    primaryDisabled?: IButtonProps['primaryDisabled'];
    styles?: IButtonProps['styles'];
    theme?: IButtonProps['theme'];
    checked?: IButtonProps['checked'];
    className?: IButtonProps['className'];
    ariaLabel?: IButtonProps['ariaLabel'];
    ariaDescription?: IButtonProps['ariaDescription'];
    ariaHidden?: IButtonProps['ariaHidden'];
    ariaSelected?: IButtonProps['aria-selected'];
    role?: IButtonProps['role'];
    tabIndex?: IButtonProps['tabIndex'];
    text?: IButtonProps['text'];
    iconProps?: IButtonProps['iconProps'];
    menuProps?: IButtonProps['menuProps'];
    split?: IButtonProps['split'];
    menuIconProps?: IButtonProps['menuIconProps'];
    splitButtonAriaLabel?: IButtonProps['splitButtonAriaLabel'];
    menuAs?: IButtonProps['menuAs'];
    secondaryText?: IButtonProps['secondaryText'];
    toggle?: IButtonProps['toggle'];
    data?: IButtonProps['data'];
    getClassNames?: IButtonProps['getClassNames'];
    getSplitButtonClassNames?: IButtonProps['getSplitButtonClassNames'];
    menuTriggerKeyCode?: IButtonProps['menuTriggerKeyCode'];
    keytipProps?: IButtonProps['keytipProps'];
    persistMenu?: IButtonProps['persistMenu'];
    renderIcon?: InputRendererOptions<IButtonProps>;
    renderText?: InputRendererOptions<IButtonProps>;
    renderDescription?: InputRendererOptions<IButtonProps>;
    renderAriaDescription?: InputRendererOptions<IButtonProps>;
    renderChildren?: InputRendererOptions<IButtonProps>;
    renderMenuIcon?: InputRendererOptions<IButtonProps>;
    readonly onClick: EventEmitter<MouseEvent>;
    readonly onMenuClick: EventEmitter<{
        ev?: MouseEvent | KeyboardEvent;
        button?: IButtonProps;
    }>;
    readonly onAfterMenuDismiss: EventEmitter<void>;
    readonly menuItemsDirectives?: QueryList<ContextualMenuItemDirective>;
    onRenderIcon: (props?: IButtonProps, defaultRender?: JsxRenderFunc<IButtonProps>) => JSX.Element;
    onRenderText: (props?: IButtonProps, defaultRender?: JsxRenderFunc<IButtonProps>) => JSX.Element;
    onRenderDescription: (props?: IButtonProps, defaultRender?: JsxRenderFunc<IButtonProps>) => JSX.Element;
    onRenderAriaDescription: (props?: IButtonProps, defaultRender?: JsxRenderFunc<IButtonProps>) => JSX.Element;
    onRenderChildren: (props?: IButtonProps, defaultRender?: JsxRenderFunc<IButtonProps>) => JSX.Element;
    onRenderMenuIcon: (props?: IButtonProps, defaultRender?: JsxRenderFunc<IButtonProps>) => JSX.Element;
    private _changeableItemsHelper;
    private _subscriptions;
    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, renderer: Renderer2, ngZone: NgZone);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    onMenuClickHandler(ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, button?: IButtonProps): void;
    onClickHandler(ev?: React.MouseEvent): void;
    private _directiveToContextualMenuItem;
    private _transformContextualMenuItemOptionsToProps;
}
