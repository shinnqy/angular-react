/// <reference types="react" />
import { ReactWrapperComponent, InputRendererOptions, JsxRenderFunc } from '@angular-react/core';
import { ChangeDetectorRef, EventEmitter, ElementRef, Renderer2, OnInit } from '@angular/core';
import { ITextFieldProps } from 'office-ui-fabric-react/lib/TextField';
export declare class FabBaseTextFieldComponent extends ReactWrapperComponent<ITextFieldProps> implements OnInit {
    protected reactNodeRef: ElementRef;
    required?: ITextFieldProps['required'];
    placeholder?: ITextFieldProps['placeholder'];
    type?: ITextFieldProps['type'];
    cols?: ITextFieldProps['cols'];
    colSpan?: ITextFieldProps['colSpan'];
    rows?: ITextFieldProps['rows'];
    rowSpan?: ITextFieldProps['rowSpan'];
    min?: ITextFieldProps['min'];
    max?: ITextFieldProps['max'];
    pattern?: ITextFieldProps['pattern'];
    htmlFor?: ITextFieldProps['htmlFor'];
    componentRef?: ITextFieldProps['componentRef'];
    multiline?: ITextFieldProps['multiline'];
    resizable?: ITextFieldProps['resizable'];
    autoAdjustHeight?: ITextFieldProps['autoAdjustHeight'];
    underlined?: ITextFieldProps['underlined'];
    borderless?: ITextFieldProps['borderless'];
    label?: ITextFieldProps['label'];
    description?: ITextFieldProps['description'];
    prefix?: ITextFieldProps['prefix'];
    suffix?: ITextFieldProps['suffix'];
    iconProps?: ITextFieldProps['iconProps'];
    defaultValue?: ITextFieldProps['defaultValue'];
    value?: ITextFieldProps['value'];
    disabled?: ITextFieldProps['disabled'];
    readOnly?: ITextFieldProps['readOnly'];
    errorMessage?: ITextFieldProps['errorMessage'];
    deferredValidationTime?: ITextFieldProps['deferredValidationTime'];
    className?: ITextFieldProps['className'];
    inputClassName?: ITextFieldProps['inputClassName'];
    ariaLabel?: ITextFieldProps['ariaLabel'];
    validateOnFocusIn?: ITextFieldProps['validateOnFocusIn'];
    validateOnFocusOut?: ITextFieldProps['validateOnFocusOut'];
    validateOnLoad?: ITextFieldProps['validateOnLoad'];
    theme?: ITextFieldProps['theme'];
    styles?: ITextFieldProps['styles'];
    autoComplete?: ITextFieldProps['autoComplete'];
    mask?: ITextFieldProps['mask'];
    maskChar?: ITextFieldProps['maskChar'];
    maskFormat?: ITextFieldProps['maskFormat'];
    getErrorMessage?: ITextFieldProps['onGetErrorMessage'];
    renderLabel?: InputRendererOptions<ITextFieldProps>;
    renderDescription?: InputRendererOptions<ITextFieldProps>;
    renderPrefix?: InputRendererOptions<ITextFieldProps>;
    renderSuffix?: InputRendererOptions<ITextFieldProps>;
    maxLength: number;
    readonly onClick: EventEmitter<MouseEvent>;
    readonly onFocus: EventEmitter<FocusEvent>;
    readonly onBlur: EventEmitter<Event>;
    readonly onChange: EventEmitter<{
        event: Event;
        newValue?: string;
    }>;
    readonly onBeforeChange: EventEmitter<{
        newValue?: string;
    }>;
    readonly onNotifyValidationResult: EventEmitter<{
        errorMessage: string | JSX.Element;
        value: string;
    }>;
    readonly valueChange: EventEmitter<string>;
    onRenderLabel: (props?: ITextFieldProps, defaultRender?: JsxRenderFunc<ITextFieldProps>) => JSX.Element;
    onRenderDescription: (props?: ITextFieldProps, defaultRender?: JsxRenderFunc<ITextFieldProps>) => JSX.Element;
    onRenderPrefix: (props?: ITextFieldProps, defaultRender?: JsxRenderFunc<ITextFieldProps>) => JSX.Element;
    onRenderSuffix: (props?: ITextFieldProps, defaultRender?: JsxRenderFunc<ITextFieldProps>) => JSX.Element;
    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, renderer: Renderer2);
    ngOnInit(): void;
    onClickHandler(ev?: React.MouseEvent): void;
    onFocusHandler(ev?: React.FocusEvent): void;
    onBlurHandler(ev?: React.SyntheticEvent): void;
    onChangeHandler(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string): void;
    onBeforeChangeHandler(newValue: any): void;
    onNotifyValidationResultHandler(errorMessage: string, value: string | undefined): void;
}
