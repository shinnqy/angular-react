/// <reference types="react" />
import { InputRendererOptions, JsxRenderFunc, ReactWrapperComponent } from '@angular-react/core';
import { ChangeDetectorRef, ElementRef, OnInit, Renderer2, EventEmitter, AfterContentInit } from '@angular/core';
import { IDropdownProps, IDropdownOption, IDropdown } from 'office-ui-fabric-react/lib/Dropdown';
import { ISelectableDroppableTextProps, ISelectableOption } from 'office-ui-fabric-react/lib/SelectableOption';
import { DropdownOptionsDirective } from './directives/dropdown-options.directive';
export declare class FabDropdownComponent extends ReactWrapperComponent<IDropdownProps> implements OnInit, AfterContentInit {
    protected reactNodeRef: ElementRef;
    readonly dropdownOptionsDirective?: DropdownOptionsDirective;
    componentRef?: IDropdownProps['componentRef'];
    label?: IDropdownProps['label'];
    ariaLabel?: IDropdownProps['ariaLabel'];
    id?: IDropdownProps['id'];
    className?: IDropdownProps['className'];
    defaultSelectedKey?: IDropdownProps['defaultSelectedKey'];
    selectedKey?: IDropdownProps['selectedKey'];
    disabled?: IDropdownProps['disabled'];
    required?: IDropdownProps['required'];
    calloutProps?: IDropdownProps['calloutProps'];
    panelProps?: IDropdownProps['panelProps'];
    errorMessage?: IDropdownProps['errorMessage'];
    placeholder?: IDropdownProps['placeholder'];
    openOnKeyboardFocus?: IDropdownProps['openOnKeyboardFocus'];
    options: IDropdownProps['options'];
    dropdownWidth?: IDropdownProps['dropdownWidth'];
    responsiveMode?: IDropdownProps['responsiveMode'];
    multiSelect?: IDropdownProps['multiSelect'];
    defaultSelectedKeys?: IDropdownProps['defaultSelectedKeys'];
    selectedKeys?: IDropdownProps['selectedKeys'];
    multiSelectDelimiter?: IDropdownProps['multiSelectDelimiter'];
    notifyOnReselect?: IDropdownProps['notifyOnReselect'];
    keytipProps?: IDropdownProps['keytipProps'];
    theme?: IDropdownProps['theme'];
    styles?: IDropdownProps['styles'];
    renderContainer?: InputRendererOptions<ISelectableDroppableTextProps<IDropdown, IDropdown>>;
    renderList?: InputRendererOptions<ISelectableDroppableTextProps<IDropdown, IDropdown>>;
    renderItem?: InputRendererOptions<ISelectableOption>;
    renderOption?: InputRendererOptions<ISelectableOption>;
    renderPlaceholder?: InputRendererOptions<IDropdownProps>;
    renderPlaceHolder?: InputRendererOptions<IDropdownProps>;
    renderTitle?: InputRendererOptions<IDropdownOption | IDropdownOption[]>;
    renderCaretDown?: InputRendererOptions<IDropdownProps>;
    readonly onChange: EventEmitter<{
        event: Event;
        option?: IDropdownOption;
        index?: number;
    }>;
    readonly onDismiss: EventEmitter<void>;
    onRenderContainer: (props?: ISelectableDroppableTextProps<IDropdown, IDropdown>, defaultRender?: JsxRenderFunc<ISelectableDroppableTextProps<IDropdown, IDropdown>>) => JSX.Element;
    onRenderList: (props?: ISelectableDroppableTextProps<IDropdown, IDropdown>, defaultRender?: JsxRenderFunc<ISelectableDroppableTextProps<IDropdown, IDropdown>>) => JSX.Element;
    onRenderItem: (props?: ISelectableOption, defaultRender?: JsxRenderFunc<ISelectableOption>) => JSX.Element;
    onRenderOption: (props?: ISelectableOption, defaultRender?: JsxRenderFunc<ISelectableOption>) => JSX.Element;
    onRenderPlaceholder: (props?: IDropdownProps, defaultRender?: JsxRenderFunc<IDropdownProps>) => JSX.Element;
    onRenderPlaceHolder: (props?: IDropdownProps, defaultRender?: JsxRenderFunc<IDropdownProps>) => JSX.Element;
    onRenderTitle: (props?: IDropdownOption | IDropdownOption[], defaultRender?: JsxRenderFunc<IDropdownOption | IDropdownOption[]>) => JSX.Element;
    onRenderCaretDown: (props?: IDropdownProps, defaultRender?: JsxRenderFunc<IDropdownProps>) => JSX.Element;
    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, renderer: Renderer2);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    onChangeHandler(event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number): void;
    onDismissHandler(): void;
    private _initDirective;
}
